# ðŸ“š Import libraries
import pandas as pd
import re
import nltk
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay

# ðŸ”§ Download NLTK stopwords
nltk.download('stopwords')
from nltk.corpus import stopwords
stop_words = set(stopwords.words('english'))

# ðŸ—‚ Load dataset
df = pd.read_csv("/content/Cyber-Threat-Intelligence-Custom-Data_new_processed.csv")

# âœ… Label using diagnosis field
threat_keywords = ['attack', 'malware', 'exploit', 'phishing', 'ransomware', 'breach', 'trojan', 'virus', 'spyware', 'APT']
df['label'] = df['diagnosis'].apply(lambda x: int(any(word in str(x).lower() for word in threat_keywords)))

# ðŸ§¼ Clean text
def clean_text(text):
    text = str(text).lower()
    text = re.sub(r'[^a-z\s]', '', text)
    words = text.split()
    words = [word for word in words if word not in stop_words]
    return ' '.join(words)

df['clean_text'] = df['text'].apply(clean_text)

# ðŸ”  TF-IDF Vectorization (reduced feature size for Excel readability)
vectorizer = TfidfVectorizer(max_features=300)
X = vectorizer.fit_transform(df['clean_text'])
y = df['label']

# ðŸ§¾ Convert TF-IDF matrix to DataFrame
tfidf_df = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names_out())
tfidf_df['label'] = y.reset_index(drop=True)  # Add label column
tfidf_df['clean_text'] = df['clean_text'].reset_index(drop=True)  # Add clean text (optional but helpful)

# ðŸ’¾ Save to CSV
tfidf_df.to_csv("/content/train_data.csv", index=False)
print("âœ… Train data CSV saved as 'train_data.csv'")

# âž• SMOTE for balancing classes
from imblearn.over_sampling import SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# ðŸ¤– Train/Test Split with stratification
X_train, X_test, y_train, y_test = train_test_split(
    X_resampled, y_resampled, test_size=0.2, stratify=y_resampled, random_state=42
)

# ðŸ§  Train Logistic Regression
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# ðŸ“ˆ Evaluation
y_pred = model.predict(X_test)
print("\nðŸ“„ Classification Report:\n")
print(classification_report(y_test, y_pred, target_names=['Non-Threat', 'Threat']))

# ðŸ“Š Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
ConfusionMatrixDisplay(cm, display_labels=['Non-Threat', 'Threat']).plot()
